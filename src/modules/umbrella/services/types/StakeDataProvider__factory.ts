/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakeDataProvider, StakeDataProviderInterface } from './StakeDataProvider';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_umbrella',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
      {
        name: '_rewardsController',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
      {
        name: '_stataTokenFactory',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getStakeData',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenSymbol',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'underlyingTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'underlyingTokenSymbol',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'cooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'unstakeWindowSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeTokenPrice',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeTokenUnderlying',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'underlyingIsWaToken',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'waTokenData',
            type: 'tuple',
            internalType: 'struct WaTokenData',
            components: [
              {
                name: 'waTokenUnderlying',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenUnderlyingName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenUnderlyingSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenAToken',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenATokenName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenATokenSymbol',
                type: 'string',
                internalType: 'string',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct Reward[]',
            components: [
              {
                name: 'rewardAddress',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'rewardName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'rewardSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'decimals',
                type: 'uint8',
                internalType: 'uint8',
              },
              {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'maxEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'distributionEnd',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'currentEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'apy',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'underlyingTokenDecimals',
            type: 'uint8',
            internalType: 'uint8',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getUserStakeData',
    inputs: [
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeUserData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'balances',
            type: 'tuple',
            internalType: 'struct StakeUserBalances',
            components: [
              {
                name: 'stakeTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stakeTokenRedeemableAmount',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenATokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'cooldown',
            type: 'tuple',
            internalType: 'struct StakeUserCooldown',
            components: [
              {
                name: 'cooldownAmount',
                type: 'uint192',
                internalType: 'uint192',
              },
              {
                name: 'endOfCooldown',
                type: 'uint32',
                internalType: 'uint32',
              },
              {
                name: 'withdrawalWindow',
                type: 'uint32',
                internalType: 'uint32',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'address[]',
            internalType: 'address[]',
          },
          {
            name: 'rewardsAccrued',
            type: 'uint256[]',
            internalType: 'uint256[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'rewardsController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'stataTokenFactory',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'umbrella',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x60e060405234801562000010575f80fd5b50604051620025f3380380620025f3833981016040819052620000339162000069565b6001600160a01b0392831660805290821660a0521660c052620000ba565b6001600160a01b038116811462000066575f80fd5b50565b5f805f606084860312156200007c575f80fd5b8351620000898162000051565b60208501519093506200009c8162000051565b6040850151909250620000af8162000051565b809150509250925092565b60805160a05160c0516124d2620001215f395f8181605e015281816102010152610a7501525f818160a201528181610b6901528181610cd401528181610e390152610ece01525f818160c9015281816101250152818161033f015261099901526124d25ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f531461009d57806384914262146100c4578063a16a09af146100eb578063e9ce34a514610100575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100f3610120565b6040516100949190611cf2565b61011361010e366004611e75565b610994565b6040516100949190611f00565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa15801561017e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101a59190810190612121565b90505f815167ffffffffffffffff8111156101c2576101c261201f565b6040519080825280602002602001820160405280156101fb57816020015b6101e86119fa565b8152602001906001900390816101e05790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa15801561025a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102819190810190612121565b90505f5b835181101561098b575f8482815181106102a1576102a161215b565b602002602001015190505f8190505f826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610310919061216f565b90505f61031d8484610cb0565b90505f61032a8388611158565b80519091506001600160a01b039081161515907f0000000000000000000000000000000000000000000000000000000000000000905f90821663050460898461037357876103d3565b876001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d3919061216f565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908a166024820152604401608060405180830381865afa92505050801561043b575060408051601f3d908101601f191682019092526104389181019061218a565b60015b156104a85780602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610480573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a491906121ea565b9150505b604051806101c001604052808d8b815181106104c6576104c661215b565b60200260200101516001600160a01b03168152602001896001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610517573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261053e9190810190612201565b8152602001896001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561057e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526105a59190810190612201565b8152602001896001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060a919061216f565b6001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610644573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261066b9190810190612201565b8152602001896001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106d0919061216f565b6001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561070a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107319190810190612201565b8152602001896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061079691906121ea565b8152602001896001600160a01b031663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107fb91906121ea565b8152602001896001600160a01b03166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061086091906121ea565b8152602001828152602001876001600160a01b031681526020018415158152602001858152602001868152602001896001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108ee919061216f565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610929573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061094d9190612287565b60ff168152508b8a815181106109655761096561215b565b602002602001018190525050505050505050508080610983906122bb565b915050610285565b50909392505050565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa1580156109f2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a199190810190612121565b90505f815167ffffffffffffffff811115610a3657610a3661201f565b604051908082528060200260200182016040528015610a6f57816020015b610a5c611a7b565b815260200190600190039081610a545790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa158015610ace573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610af59190810190612121565b90505f5b8351811015610ca6575f848281518110610b1557610b1561215b565b602002602001015190505f610b2b88838661145f565b90505f610b3889846116d4565b60405160016204621960e51b031981526001600160a01b0385811660048301528b811660248301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063ff73bce0906044015f60405180830381865afa158015610baf573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610bd691908101906122d3565b915091506040518060c00160405280866001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610c2f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610c569190810190612201565b815260200185815260200184815260200183815260200182815250888781518110610c8357610c8361215b565b602002602001018190525050505050508080610c9e906122bb565b915050610af9565b5090949350505050565b60405163362a3fad60e01b81526001600160a01b0382811660048301526060915f917f0000000000000000000000000000000000000000000000000000000000000000169063362a3fad906024015f60405180830381865afa158015610d18573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d3f9190810190612121565b90505f815167ffffffffffffffff811115610d5c57610d5c61201f565b604051908082528060200260200182016040528015610de157816020015b610dce6040518061012001604052805f6001600160a01b0316815260200160608152602001606081526020015f60ff1681526020015f81526020015f81526020015f81526020015f81526020015f81525090565b815260200190600190039081610d7a5790505b5090505f5b825181101561114d575f838281518110610e0257610e0261215b565b60209081029190910101516040516334fb3ea160e11b81526001600160a01b03888116600483015280831660248301529192505f917f000000000000000000000000000000000000000000000000000000000000000016906369f67d4290604401608060405180830381865afa158015610e7e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ea29190612388565b604051630450881160e51b81526001600160a01b03898116600483015284811660248301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638a11022090604401602060405180830381865afa158015610f13573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f3791906121ea565b9050604051806101200160405280846001600160a01b03168152602001846001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610f8f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610fb69190810190612201565b8152602001846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610ff6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261101d9190810190612201565b8152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561105e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110829190612287565b60ff168152602001836020015181526020018360400151815260200183606001518152602001828152602001611117838c6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ee573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061111291906121ea565b6117a1565b81525085858151811061112c5761112c61215b565b60200260200101819052505050508080611145906122bb565b915050610de6565b509150505b92915050565b611160611afc565b61116a83836117dd565b15611401575f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d0919061216f565b90505f846001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561120f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611233919061216f565b90506040518060c00160405280836001600160a01b03168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561128a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526112b19190810190612201565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156112f1573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113189190810190612201565b8152602001826001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611367573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261138e9190810190612201565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156113ce573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113f59190810190612201565b81525092505050611152565b506040805160c0810182525f808252825160208181018552828252808401919091528351808201855282815283850152606083018290528351808201855282815260808401528351908101909352825260a081019190915292915050565b61148c6040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b5f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114c9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114ed919061216f565b90505f806114fc878487611840565b6040805160a08101918290526370a0823160e01b9091526001600160a01b038a811660a483015292945090925090819088166370a0823160c48301602060405180830381865afa158015611552573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061157691906121ea565b81526040516370a0823160e01b81526001600160a01b038a81166004830152602090920191891690634cdad5069082906370a0823190602401602060405180830381865afa1580156115ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115ee91906121ea565b6040518263ffffffff1660e01b815260040161160c91815260200190565b602060405180830381865afa158015611627573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061164b91906121ea565b81526040516370a0823160e01b81526001600160a01b038a811660048301526020909201918616906370a0823190602401602060405180830381865afa158015611697573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116bb91906121ea565b8152602081019390935260409092015295945050505050565b604080516060810182525f80825260208201819052918101919091526040516317c547a160e11b81526001600160a01b0384811660048301525f9190841690632f8a8f4290602401606060405180830381865afa158015611737573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061175b91906123ef565b90506040518060600160405280825f01516001600160c01b03168152602001826020015163ffffffff168152602001826040015163ffffffff1681525091505092915050565b5f815f036117b057505f611152565b816127106117c26301e1338086612466565b6117cc9190612466565b6117d6919061247d565b9392505050565b5f805b8251811015611837578281815181106117fb576117fb61215b565b60200260200101516001600160a01b0316846001600160a01b031603611825576001915050611152565b8061182f816122bb565b9150506117e0565b505f9392505050565b5f8061184c84846117dd565b156119f2575f846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561188e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118b2919061216f565b90505f856001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118f1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611915919061216f565b6040516370a0823160e01b81526001600160a01b038981166004830152919250908316906370a0823190602401602060405180830381865afa15801561195d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061198191906121ea565b6040516370a0823160e01b81526001600160a01b038981166004830152919550908216906370a0823190602401602060405180830381865afa1580156119c9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119ed91906121ea565b925050505b935093915050565b604051806101c001604052805f6001600160a01b03168152602001606081526020016060815260200160608152602001606081526020015f81526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f15158152602001611a68611afc565b8152606060208201525f60409091015290565b6040518060c001604052805f6001600160a01b0316815260200160608152602001611ac96040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b8152604080516060810182525f808252602082810182905292820152910190815260200160608152602001606081525090565b6040518060c001604052805f6001600160a01b0316815260200160608152602001606081526020015f6001600160a01b0316815260200160608152602001606081525090565b5f5b83811015611b5c578181015183820152602001611b44565b50505f910152565b5f8151808452611b7b816020860160208601611b42565b601f01601f19169290920160200192915050565b5f60018060a01b03808351168452602083015160c06020860152611bb660c0860182611b64565b905060408401518582036040870152611bcf8282611b64565b915050816060850151166060860152608084015191508481036080860152611bf78183611b64565b91505060a083015184820360a0860152611c118282611b64565b95945050505050565b5f82825180855260208086019550808260051b8401018186015f5b84811015611ce557858303601f19018952815180516001600160a01b03168452610120858201518187870152611c6d82870182611b64565b91505060408083015186830382880152611c878382611b64565b92505050606080830151611c9f8288018260ff169052565b50506080828101519086015260a0808301519086015260c0808301519086015260e080830151908601526101009182015191909401529783019790830190600101611c35565b5090979650505050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b83811015611e5057888303603f19018552815180516001600160a01b031684526101c088820151818a870152611d4f82870182611b64565b9150508782015185820389870152611d678282611b64565b91505060608083015186830382880152611d818382611b64565b9250505060808083015186830382880152611d9c8382611b64565b60a0858101519089015260c0808601519089015260e080860151908901526101008086015190890152610120808601516001600160a01b0316908901526101408086015115159089015261016080860151898303828b015291945092509050611e058382611b8f565b925050506101808083015186830382880152611e218382611c1a565b925050506101a0808301519250611e3c8187018460ff169052565b509588019593505090860190600101611d17565b509098975050505050505050565b6001600160a01b0381168114611e72575f80fd5b50565b5f60208284031215611e85575f80fd5b81356117d681611e5e565b5f8151808452602080850194508084015f5b83811015611ec75781516001600160a01b031687529582019590820190600101611ea2565b509495945050505050565b5f8151808452602080850194508084015f5b83811015611ec757815187529582019590820190600101611ee4565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b83811015611e5057888303603f19018552815180516001600160a01b031684528781015161018089860181905290611f5f82870182611b64565b898401518051888c01528b8101516060808a0191909152818c01516080808b01919091528183015160a0808c018290529382015160c08c01528288015180516001600160c01b031660e08d0152602081015163ffffffff9081166101008e0152604090910151166101208c0152818801518b86036101408d01529496509394509091611feb8686611e90565b9550808701519650505050505084810361016086015261200b8183611ed2565b968901969450505090860190600101611f25565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff811182821017156120565761205661201f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156120855761208561201f565b604052919050565b5f67ffffffffffffffff8211156120a6576120a661201f565b5060051b60200190565b5f82601f8301126120bf575f80fd5b815160206120d46120cf8361208d565b61205c565b82815260059290921b840181019181810190868411156120f2575f80fd5b8286015b8481101561211657805161210981611e5e565b83529183019183016120f6565b509695505050505050565b5f60208284031215612131575f80fd5b815167ffffffffffffffff811115612147575f80fd5b612153848285016120b0565b949350505050565b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561217f575f80fd5b81516117d681611e5e565b5f6080828403121561219a575f80fd5b6121a2612033565b82516121ad81611e5e565b815260208301516121bd81611e5e565b602082015260408381015190820152606083015180151581146121de575f80fd5b60608201529392505050565b5f602082840312156121fa575f80fd5b5051919050565b5f60208284031215612211575f80fd5b815167ffffffffffffffff80821115612228575f80fd5b818401915084601f83011261223b575f80fd5b81518181111561224d5761224d61201f565b612260601f8201601f191660200161205c565b9150808252856020828501011115612276575f80fd5b61114d816020840160208601611b42565b5f60208284031215612297575f80fd5b815160ff811681146117d6575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f600182016122cc576122cc6122a7565b5060010190565b5f80604083850312156122e4575f80fd5b825167ffffffffffffffff808211156122fb575f80fd5b612307868387016120b0565b935060209150818501518181111561231d575f80fd5b85019050601f8101861361232f575f80fd5b805161233d6120cf8261208d565b81815260059190911b8201830190838101908883111561235b575f80fd5b928401925b8284101561237957835182529284019290840190612360565b80955050505050509250929050565b5f60808284031215612398575f80fd5b6123a0612033565b82516123ab81611e5e565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b805163ffffffff811681146123ea575f80fd5b919050565b5f606082840312156123ff575f80fd5b6040516060810181811067ffffffffffffffff821117156124225761242261201f565b60405282516001600160c01b038116811461243b575f80fd5b8152612449602084016123d7565b602082015261245a604084016123d7565b60408201529392505050565b8082028115828204841417611152576111526122a7565b5f8261249757634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220876d3718e4f574f74298008ce25b1ff6d734db1400974bf3821fc307f1b65cb764736f6c63430008140033';

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
