/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakeDataProvider,
  StakeDataProviderInterface,
} from "./StakeDataProvider";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_umbrella",
        type: "address",
        internalType: "contract IUmbrellaStkManager",
      },
      {
        name: "_rewardsController",
        type: "address",
        internalType: "contract IRewardsController",
      },
      {
        name: "_stataTokenFactory",
        type: "address",
        internalType: "contract IStataTokenFactory",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getStakeData",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct StakeData[]",
        components: [
          {
            name: "stakeToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "stakeTokenName",
            type: "string",
            internalType: "string",
          },
          {
            name: "stakeTokenTotalSupply",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "cooldownSeconds",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "unstakeWindowSeconds",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "stakeTokenUnderlying",
            type: "address",
            internalType: "address",
          },
          {
            name: "underlyingIsWaToken",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "waTokenUnderlying",
            type: "address",
            internalType: "address",
          },
          {
            name: "waTokenAToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "waTokenPrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "rewards",
            type: "tuple[]",
            internalType: "struct Reward[]",
            components: [
              {
                name: "rewardAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "index",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "maxEmissionPerSecond",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "distributionEnd",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "currentEmissionPerSecond",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getUserStakeData",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct StakeUserData[]",
        components: [
          {
            name: "stakeToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "stakeTokenName",
            type: "string",
            internalType: "string",
          },
          {
            name: "stakeTokenBalance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "stakeTokenRedeemableAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "underlyingTokenBalance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "cooldownAmount",
            type: "uint192",
            internalType: "uint192",
          },
          {
            name: "endOfCooldown",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "withdrawalWindow",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "rewards",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "rewardsAccrued",
            type: "uint256[]",
            internalType: "uint256[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rewardsController",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IRewardsController",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "stataTokenFactory",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IStataTokenFactory",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "umbrella",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IUmbrellaStkManager",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x60e060405234801562000010575f80fd5b50604051620017b3380380620017b3833981016040819052620000339162000069565b6001600160a01b0392831660805290821660a0521660c052620000ba565b6001600160a01b038116811462000066575f80fd5b50565b5f805f606084860312156200007c575f80fd5b8351620000898162000051565b60208501519093506200009c8162000051565b6040850151909250620000af8162000051565b809150509250925092565b60805160a05160c0516116a0620001135f395f8181605e015261025001525f818160a201528181610383015281816106070152818161069c0152610c3c01525f818160c90152818161012501526109c701526116a05ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f531461009d57806384914262146100c4578063a16a09af146100eb578063e9ce34a514610100575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100f3610120565b604051610094919061100e565b61011361010e366004611128565b6109c2565b60405161009491906111af565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa15801561017e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101a59190810190611386565b90505f815167ffffffffffffffff8111156101c2576101c26112ad565b60405190808252806020026020018201604052801561024a57816020015b60408051610160810182525f8082526060602083018190529282018190528282018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201526101408101919091528152602001906001900390816101e05790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa1580156102a9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102d09190810190611386565b90505f5b83518110156109b9575f8482815181106102f0576102f06113c0565b602002602001015190505f8190505f826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061035f91906113d4565b60405163362a3fad60e01b81526001600160a01b0384811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063362a3fad906024015f60405180830381865afa1580156103c7573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526103ee9190810190611386565b90505f815167ffffffffffffffff81111561040b5761040b6112ad565b60405190808252806020026020018201604052801561047257816020015b61045f6040518060a001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81525090565b8152602001906001900390816104295790505b5090505f6104808489610ef0565b90505f805f83156105b257866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104eb91906113d4565b9250866001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610529573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054d91906113d4565b9150866001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105af91906113ef565b90505b5f5b8651811015610776575f8782815181106105d0576105d06113c0565b60209081029190910101516040516334fb3ea160e11b81526001600160a01b038c8116600483015280831660248301529192505f917f000000000000000000000000000000000000000000000000000000000000000016906369f67d4290604401608060405180830381865afa15801561064c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106709190611406565b604051630450881160e51b81526001600160a01b038d8116600483015284811660248301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638a11022090604401602060405180830381865afa1580156106e1573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061070591906113ef565b90506040518060a00160405280846001600160a01b0316815260200183602001518152602001836040015181526020018360600151815260200182815250898581518110610755576107556113c0565b6020026020010181905250505050808061076e90611473565b9150506105b4565b506040518061016001604052808e8c81518110610795576107956113c0565b60200260200101516001600160a01b031681526020018a6001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156107e6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261080d9190810190611497565b81526020018a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061087291906113ef565b81526020018a6001600160a01b031663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108d791906113ef565b81526020018a6001600160a01b03166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610918573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061093c91906113ef565b8152602001886001600160a01b031681526020018515158152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001868152508c8b81518110610992576109926113c0565b602002602001018190525050505050505050505080806109b190611473565b9150506102d4565b50909392505050565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa158015610a20573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a479190810190611386565b90505f815167ffffffffffffffff811115610a6457610a646112ad565b604051908082528060200260200182016040528015610b0257816020015b610aef6040518061014001604052805f6001600160a01b03168152602001606081526020015f81526020015f81526020015f81526020015f6001600160c01b031681526020015f63ffffffff1681526020015f63ffffffff16815260200160608152602001606081525090565b815260200190600190039081610a825790505b5090505f5b8251811015610ee8575f838281518110610b2357610b236113c0565b60209081029190910101516040516317c547a160e11b81526001600160a01b0388811660048301529192505f91831690632f8a8f4290602401606060405180830381865afa158015610b77573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b9b919061153e565b6040516370a0823160e01b81526001600160a01b03898116600483015291925083915f91908316906370a0823190602401602060405180830381865afa158015610be7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0b91906113ef565b60405160016204621960e51b031981526001600160a01b0384811660048301528b811660248301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063ff73bce0906044015f60405180830381865afa158015610c82573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610ca991908101906115b5565b91509150604051806101400160405280856001600160a01b03168152602001876001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610d03573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d2a9190810190611497565b8152602001848152602001876001600160a01b0316634cdad506866040518263ffffffff1660e01b8152600401610d6391815260200190565b602060405180830381865afa158015610d7e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610da291906113ef565b8152602001876001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e0791906113d4565b6040516370a0823160e01b81526001600160a01b038f8116600483015291909116906370a0823190602401602060405180830381865afa158015610e4d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e7191906113ef565b8152602001865f01516001600160c01b03168152602001866020015163ffffffff168152602001866040015163ffffffff16815260200183815260200182815250888881518110610ec457610ec46113c0565b60200260200101819052505050505050508080610ee090611473565b915050610b07565b509392505050565b5f805b8251811015610f4a57828181518110610f0e57610f0e6113c0565b60200260200101516001600160a01b0316846001600160a01b031603610f38576001915050610f4f565b80610f4281611473565b915050610ef3565b505f90505b92915050565b5f5b83811015610f6f578181015183820152602001610f57565b50505f910152565b5f8151808452610f8e816020860160208601610f55565b601f01601f19169290920160200192915050565b5f8151808452602080850194508084015f5b8381101561100357815180516001600160a01b03168852838101518489015260408082015190890152606080820151908901526080908101519088015260a09096019590820190600101610fb4565b509495945050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561110357888303603f19018552815180516001600160a01b0316845261016088820151818a87015261106b82870182610f77565b89840151878b0152606080850151908801526080808501519088015260a0808501516001600160a01b039081169189019190915260c08086015115159089015260e08086015182169089015261010080860151909116908801526101208085015190880152610140938401518782039488019490945291506110ef90508183610fa2565b968901969450505090860190600101611033565b509098975050505050505050565b6001600160a01b0381168114611125575f80fd5b50565b5f60208284031215611138575f80fd5b813561114381611111565b9392505050565b5f8151808452602080850194508084015f5b838110156110035781516001600160a01b03168752958201959082019060010161115c565b5f8151808452602080850194508084015f5b8381101561100357815187529582019590820190600101611193565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561110357888303603f19018552815180516001600160a01b0316845261014088820151818a87015261120c82870182610f77565b89840151878b0152606080850151908801526080808501519088015260a0808501516001600160c01b03169088015260c08085015163ffffffff9081169189019190915260e0808601519091169088015261010080850151888303828a0152919350915061127a838261114a565b9250505061012080830151925085820381870152506112998183611181565b9689019694505050908601906001016111d4565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112ea576112ea6112ad565b604052919050565b5f67ffffffffffffffff82111561130b5761130b6112ad565b5060051b60200190565b5f82601f830112611324575f80fd5b81516020611339611334836112f2565b6112c1565b82815260059290921b84018101918181019086841115611357575f80fd5b8286015b8481101561137b57805161136e81611111565b835291830191830161135b565b509695505050505050565b5f60208284031215611396575f80fd5b815167ffffffffffffffff8111156113ac575f80fd5b6113b884828501611315565b949350505050565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156113e4575f80fd5b815161114381611111565b5f602082840312156113ff575f80fd5b5051919050565b5f60808284031215611416575f80fd5b6040516080810181811067ffffffffffffffff82111715611439576114396112ad565b604052825161144781611111565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b5f6001820161149057634e487b7160e01b5f52601160045260245ffd5b5060010190565b5f602082840312156114a7575f80fd5b815167ffffffffffffffff808211156114be575f80fd5b818401915084601f8301126114d1575f80fd5b8151818111156114e3576114e36112ad565b6114f6601f8201601f19166020016112c1565b915080825285602082850101111561150c575f80fd5b61151d816020840160208601610f55565b50949350505050565b805163ffffffff81168114611539575f80fd5b919050565b5f6060828403121561154e575f80fd5b6040516060810181811067ffffffffffffffff82111715611571576115716112ad565b60405282516001600160c01b038116811461158a575f80fd5b815261159860208401611526565b60208201526115a960408401611526565b60408201529392505050565b5f80604083850312156115c6575f80fd5b825167ffffffffffffffff808211156115dd575f80fd5b6115e986838701611315565b93506020915081850151818111156115ff575f80fd5b85019050601f81018613611611575f80fd5b805161161f611334826112f2565b81815260059190911b8201830190838101908883111561163d575f80fd5b928401925b8284101561165b57835182529284019290840190611642565b8095505050505050925092905056fea2646970667358221220d88391380b7d4a72b92d162e21cd262b70a085d1e3e504635ed7725199b053dd64736f6c63430008140033";

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
