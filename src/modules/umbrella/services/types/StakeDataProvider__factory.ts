/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakeDataProvider, StakeDataProviderInterface } from './StakeDataProvider';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_umbrella',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
      {
        name: '_rewardsController',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
      {
        name: '_stataTokenFactory',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getStakeData',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'cooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'unstakeWindowSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeTokenUnderlying',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'underlyingIsWaToken',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'waTokenData',
            type: 'tuple',
            internalType: 'struct WaTokenData',
            components: [
              {
                name: 'waTokenUnderlying',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenAToken',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenPrice',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct Reward[]',
            components: [
              {
                name: 'rewardAddress',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'maxEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'distributionEnd',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'currentEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'apy',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getUserStakeData',
    inputs: [
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeUserData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'balances',
            type: 'tuple',
            internalType: 'struct StakeUserBalances',
            components: [
              {
                name: 'stakeTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stakeTokenRedeemableAmount',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenATokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'cooldown',
            type: 'tuple',
            internalType: 'struct StakeUserCooldown',
            components: [
              {
                name: 'cooldownAmount',
                type: 'uint192',
                internalType: 'uint192',
              },
              {
                name: 'endOfCooldown',
                type: 'uint32',
                internalType: 'uint32',
              },
              {
                name: 'withdrawalWindow',
                type: 'uint32',
                internalType: 'uint32',
              },
            ],
          },
          {
            name: 'underlyingTokenDecimals',
            type: 'uint8',
            internalType: 'uint8',
          },
          {
            name: 'rewards',
            type: 'address[]',
            internalType: 'address[]',
          },
          {
            name: 'rewardsAccrued',
            type: 'uint256[]',
            internalType: 'uint256[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'rewardsController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'stataTokenFactory',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'umbrella',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x60e060405234801562000010575f80fd5b5060405162001da538038062001da5833981016040819052620000339162000069565b6001600160a01b0392831660805290821660a0521660c052620000ba565b6001600160a01b038116811462000066575f80fd5b50565b5f805f606084860312156200007c575f80fd5b8351620000898162000051565b60208501519093506200009c8162000051565b6040850151909250620000af8162000051565b809150509250925092565b60805160a05160c051611c8b6200011a5f395f8181605e0152818161025c015261069601525f818160a20152818161078a015281816109bc01528181610b090152610b9e01525f818160c90152818161012501526105ba0152611c8b5ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f531461009d57806384914262146100c4578063a16a09af146100eb578063e9ce34a514610100575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100f3610120565b6040516100949190611572565b61011361010e366004611699565b6105b5565b6040516100949190611719565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa15801561017e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101a5919081019061191c565b90505f815167ffffffffffffffff8111156101c2576101c2611843565b60405190808252806020026020018201604052801561025657816020015b61024360408051610120810182525f808252606060208084018290528385018390528184018390526080840183905260a0840183905260c08401839052845191820185528282528101829052928301529060e08201908152602001606081525090565b8152602001906001900390816101e05790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa1580156102b5573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102dc919081019061191c565b90505f5b83518110156105ac575f8482815181106102fc576102fc611956565b602002602001015190505f8190505f826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610347573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036b919061196a565b90505f6103788484610998565b90505f6103858388610cf1565b90506040518061012001604052808a88815181106103a5576103a5611956565b60200260200101516001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156103f6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261041d9190810190611985565b8152602001866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104829190611a0b565b8152602001866001600160a01b031663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e79190611a0b565b8152602001866001600160a01b03166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610528573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054c9190611a0b565b81526001600160a01b0380861660208301528351161515604082015260608101839052608001839052885189908890811061058957610589611956565b6020026020010181905250505050505080806105a490611a36565b9150506102e0565b50909392505050565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa158015610613573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261063a919081019061191c565b90505f815167ffffffffffffffff81111561065757610657611843565b60405190808252806020026020018201604052801561069057816020015b61067d61142a565b8152602001906001900390816106755790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa1580156106ef573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610716919081019061191c565b90505f5b835181101561098e575f84828151811061073657610736611956565b602002602001015190505f61074c888386610e8f565b90505f6107598984611104565b60405160016204621960e51b031981526001600160a01b0385811660048301528b811660248301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063ff73bce0906044015f60405180830381865afa1580156107d0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107f79190810190611a4e565b915091506040518060e00160405280866001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610850573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526108779190810190611985565b8152602001858152602001848152602001866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e8919061196a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610923573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109479190611b03565b60ff1681526020018381526020018281525088878151811061096b5761096b611956565b60200260200101819052505050505050808061098690611a36565b91505061071a565b5090949350505050565b60405163362a3fad60e01b81526001600160a01b0382811660048301526060915f917f0000000000000000000000000000000000000000000000000000000000000000169063362a3fad906024015f60405180830381865afa158015610a00573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a27919081019061191c565b90505f815167ffffffffffffffff811115610a4457610a44611843565b604051908082528060200260200182016040528015610ab157816020015b610a9e6040518060c001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81525090565b815260200190600190039081610a625790505b5090505f5b8251811015610ce6575f838281518110610ad257610ad2611956565b60209081029190910101516040516334fb3ea160e11b81526001600160a01b03888116600483015280831660248301529192505f917f000000000000000000000000000000000000000000000000000000000000000016906369f67d4290604401608060405180830381865afa158015610b4e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b729190611b23565b604051630450881160e51b81526001600160a01b03898116600483015284811660248301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638a11022090604401602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c079190611a0b565b90506040518060c00160405280846001600160a01b03168152602001836020015181526020018360400151815260200183606001518152602001828152602001610cb0838c6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c87573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cab9190611a0b565b6111d1565b815250858581518110610cc557610cc5611956565b60200260200101819052505050508080610cde90611a36565b915050610ab6565b509150505b92915050565b604080516060810182525f8082526020820181905291810191909152610d17838361120d565b15610e6c576040518060600160405280846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d63573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d87919061196a565b6001600160a01b03168152602001846001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610df5919061196a565b6001600160a01b03168152602001846001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e639190611a0b565b90529050610ceb565b50604080516060810182525f808252602082018190529181019190915292915050565b610ebc6040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b5f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ef9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f1d919061196a565b90505f80610f2c878487611270565b6040805160a08101918290526370a0823160e01b9091526001600160a01b038a811660a483015292945090925090819088166370a0823160c48301602060405180830381865afa158015610f82573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fa69190611a0b565b81526040516370a0823160e01b81526001600160a01b038a81166004830152602090920191891690634cdad5069082906370a0823190602401602060405180830381865afa158015610ffa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061101e9190611a0b565b6040518263ffffffff1660e01b815260040161103c91815260200190565b602060405180830381865afa158015611057573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061107b9190611a0b565b81526040516370a0823160e01b81526001600160a01b038a811660048301526020909201918616906370a0823190602401602060405180830381865afa1580156110c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110eb9190611a0b565b8152602081019390935260409092015295945050505050565b604080516060810182525f80825260208201819052918101919091526040516317c547a160e11b81526001600160a01b0384811660048301525f9190841690632f8a8f4290602401606060405180830381865afa158015611167573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118b9190611ba8565b90506040518060600160405280825f01516001600160c01b03168152602001826020015163ffffffff168152602001826040015163ffffffff1681525091505092915050565b5f815f036111e057505f610ceb565b816127106111f26301e1338086611c1f565b6111fc9190611c1f565b6112069190611c36565b9392505050565b5f805b82518110156112675782818151811061122b5761122b611956565b60200260200101516001600160a01b0316846001600160a01b031603611255576001915050610ceb565b8061125f81611a36565b915050611210565b505f9392505050565b5f8061127c848461120d565b15611422575f846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112e2919061196a565b90505f856001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611321573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611345919061196a565b6040516370a0823160e01b81526001600160a01b038981166004830152919250908316906370a0823190602401602060405180830381865afa15801561138d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113b19190611a0b565b6040516370a0823160e01b81526001600160a01b038981166004830152919550908216906370a0823190602401602060405180830381865afa1580156113f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061141d9190611a0b565b925050505b935093915050565b6040518060e001604052805f6001600160a01b03168152602001606081526020016114786040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b8152604080516060810182525f80825260208281018290529282015291019081525f60208201526060604082018190529081015290565b5f5b838110156114c95781810151838201526020016114b1565b50505f910152565b5f81518084526114e88160208601602086016114af565b601f01601f19169290920160200192915050565b5f8151808452602080850194508084015f5b8381101561156757815180516001600160a01b03168852838101518489015260408082015190890152606080820151908901526080808201519089015260a0908101519088015260c0909601959082019060010161150e565b509495945050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561167457888303603f19018552815180516001600160a01b0316845261016088820151818a8701526115cf828701826114d1565b838a0151878b0152606080850151908801526080808501519088015260a0808501516001600160a01b038116828a01529193509150505060c08281015180151587830152505060e08281015180516001600160a01b039081168884015260208201511661010088015260408101516101208801525050610100820151915084810361014086015261166081836114fc565b968901969450505090860190600101611597565b509098975050505050505050565b6001600160a01b0381168114611696575f80fd5b50565b5f602082840312156116a9575f80fd5b813561120681611682565b5f8151808452602080850194508084015f5b838110156115675781516001600160a01b0316875295820195908201906001016116c6565b5f8151808452602080850194508084015f5b83811015611567578151875295820195908201906001016116fd565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561167457888303603f19018552815180516001600160a01b03168452878101516101a089860181905290611778828701826114d1565b915050878201516117b68987018280518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b50606082015180516001600160c01b031660e0870152602081015163ffffffff90811661010088015260409091015116610120860152608082015160ff1661014086015260a082015185820361016087015261181282826116b4565b91505060c0820151915084810361018086015261182f81836116eb565b96890196945050509086019060010161173e565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561188057611880611843565b604052919050565b5f67ffffffffffffffff8211156118a1576118a1611843565b5060051b60200190565b5f82601f8301126118ba575f80fd5b815160206118cf6118ca83611888565b611857565b82815260059290921b840181019181810190868411156118ed575f80fd5b8286015b8481101561191157805161190481611682565b83529183019183016118f1565b509695505050505050565b5f6020828403121561192c575f80fd5b815167ffffffffffffffff811115611942575f80fd5b61194e848285016118ab565b949350505050565b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561197a575f80fd5b815161120681611682565b5f60208284031215611995575f80fd5b815167ffffffffffffffff808211156119ac575f80fd5b818401915084601f8301126119bf575f80fd5b8151818111156119d1576119d1611843565b6119e4601f8201601f1916602001611857565b91508082528560208285010111156119fa575f80fd5b610ce68160208401602086016114af565b5f60208284031215611a1b575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b5f60018201611a4757611a47611a22565b5060010190565b5f8060408385031215611a5f575f80fd5b825167ffffffffffffffff80821115611a76575f80fd5b611a82868387016118ab565b9350602091508185015181811115611a98575f80fd5b85019050601f81018613611aaa575f80fd5b8051611ab86118ca82611888565b81815260059190911b82018301908381019088831115611ad6575f80fd5b928401925b82841015611af457835182529284019290840190611adb565b80955050505050509250929050565b5f60208284031215611b13575f80fd5b815160ff81168114611206575f80fd5b5f60808284031215611b33575f80fd5b6040516080810181811067ffffffffffffffff82111715611b5657611b56611843565b6040528251611b6481611682565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b805163ffffffff81168114611ba3575f80fd5b919050565b5f60608284031215611bb8575f80fd5b6040516060810181811067ffffffffffffffff82111715611bdb57611bdb611843565b60405282516001600160c01b0381168114611bf4575f80fd5b8152611c0260208401611b90565b6020820152611c1360408401611b90565b60408201529392505050565b8082028115828204841417610ceb57610ceb611a22565b5f82611c5057634e487b7160e01b5f52601260045260245ffd5b50049056fea264697066735822122035d336e5989939d96f95bcc2af578d616c6c2c48bd84dc50571e74cf99b2b46964736f6c63430008140033';

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
