/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakeDataProvider, StakeDataProviderInterface } from './StakeDataProvider';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_umbrella',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
      {
        name: '_rewardsController',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
      {
        name: '_stataTokenFactory',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getStakeData',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenSymbol',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'underlyingTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'underlyingTokenSymbol',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'cooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'unstakeWindowSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeTokenUnderlying',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'underlyingIsWaToken',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'waTokenData',
            type: 'tuple',
            internalType: 'struct WaTokenData',
            components: [
              {
                name: 'waTokenUnderlying',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenUnderlyingName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenUnderlyingSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenAToken',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenATokenName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenATokenSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenPrice',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct Reward[]',
            components: [
              {
                name: 'rewardAddress',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'rewardName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'rewardSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'maxEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'distributionEnd',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'currentEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'apy',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'underlyingTokenDecimals',
            type: 'uint8',
            internalType: 'uint8',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getUserStakeData',
    inputs: [
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeUserData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'balances',
            type: 'tuple',
            internalType: 'struct StakeUserBalances',
            components: [
              {
                name: 'stakeTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stakeTokenRedeemableAmount',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenATokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'cooldown',
            type: 'tuple',
            internalType: 'struct StakeUserCooldown',
            components: [
              {
                name: 'cooldownAmount',
                type: 'uint192',
                internalType: 'uint192',
              },
              {
                name: 'endOfCooldown',
                type: 'uint32',
                internalType: 'uint32',
              },
              {
                name: 'withdrawalWindow',
                type: 'uint32',
                internalType: 'uint32',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'address[]',
            internalType: 'address[]',
          },
          {
            name: 'rewardsAccrued',
            type: 'uint256[]',
            internalType: 'uint256[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'rewardsController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'stataTokenFactory',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'umbrella',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x60e060405234801562000010575f80fd5b50604051620023fe380380620023fe833981016040819052620000339162000069565b6001600160a01b0392831660805290821660a0521660c052620000ba565b6001600160a01b038116811462000066575f80fd5b50565b5f805f606084860312156200007c575f80fd5b8351620000898162000051565b60208501519093506200009c8162000051565b6040850151909250620000af8162000051565b809150509250925092565b60805160a05160c0516122e46200011a5f395f8181605e01528181610201015261090801525f818160a2015281816109fc01528181610b6701528181610cc30152610d5801525f818160c901528181610125015261082c01526122e45ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f531461009d57806384914262146100c4578063a16a09af146100eb578063e9ce34a514610100575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100f3610120565b6040516100949190611b7a565b61011361010e366004611cf2565b610827565b6040516100949190611d7d565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa15801561017e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101a59190810190611f75565b90505f815167ffffffffffffffff8111156101c2576101c2611e9c565b6040519080825280602002602001820160405280156101fb57816020015b6101e861188a565b8152602001906001900390816101e05790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa15801561025a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102819190810190611f75565b90505f5b835181101561081e575f8482815181106102a1576102a1611faf565b602002602001015190505f8190505f826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103109190611fc3565b90505f61031d8484610b43565b90505f61032a8388610f7a565b9050604051806101a001604052808a888151811061034a5761034a611faf565b60200260200101516001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561039b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526103c29190810190611fde565b8152602001866001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610402573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526104299190810190611fde565b8152602001866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061048e9190611fc3565b6001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156104c8573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526104ef9190810190611fde565b8152602001866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610530573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105549190611fc3565b6001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561058e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526105b59190810190611fde565b8152602001866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061a9190612064565b8152602001866001600160a01b031663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061067f9190612064565b8152602001866001600160a01b03166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e49190612064565b8152602001846001600160a01b031681526020015f6001600160a01b0316835f01516001600160a01b0316141515158152602001828152602001838152602001866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610760573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107849190611fc3565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107e3919061207b565b60ff168152508887815181106107fb576107fb611faf565b602002602001018190525050505050508080610816906120af565b915050610285565b50909392505050565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa158015610885573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526108ac9190810190611f75565b90505f815167ffffffffffffffff8111156108c9576108c9611e9c565b60405190808252806020026020018201604052801561090257816020015b6108ef611905565b8152602001906001900390816108e75790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa158015610961573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109889190810190611f75565b90505f5b8351811015610b39575f8482815181106109a8576109a8611faf565b602002602001015190505f6109be8883866112ef565b90505f6109cb8984611564565b60405160016204621960e51b031981526001600160a01b0385811660048301528b811660248301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063ff73bce0906044015f60405180830381865afa158015610a42573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a6991908101906120c7565b915091506040518060c00160405280866001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610ac2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610ae99190810190611fde565b815260200185815260200184815260200183815260200182815250888781518110610b1657610b16611faf565b602002602001018190525050505050508080610b31906120af565b91505061098c565b5090949350505050565b60405163362a3fad60e01b81526001600160a01b0382811660048301526060915f917f0000000000000000000000000000000000000000000000000000000000000000169063362a3fad906024015f60405180830381865afa158015610bab573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610bd29190810190611f75565b90505f815167ffffffffffffffff811115610bef57610bef611e9c565b604051908082528060200260200182016040528015610c6b57816020015b610c586040518061010001604052805f6001600160a01b0316815260200160608152602001606081526020015f81526020015f81526020015f81526020015f81526020015f81525090565b815260200190600190039081610c0d5790505b5090505f5b8251811015610f6f575f838281518110610c8c57610c8c611faf565b60209081029190910101516040516334fb3ea160e11b81526001600160a01b03888116600483015280831660248301529192505f917f000000000000000000000000000000000000000000000000000000000000000016906369f67d4290604401608060405180830381865afa158015610d08573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d2c919061217c565b604051630450881160e51b81526001600160a01b03898116600483015284811660248301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638a11022090604401602060405180830381865afa158015610d9d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dc19190612064565b9050604051806101000160405280846001600160a01b03168152602001846001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610e19573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e409190810190611fde565b8152602001846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610e80573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610ea79190810190611fde565b8152602001836020015181526020018360400151815260200183606001518152602001828152602001610f39838c6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f349190612064565b611631565b815250858581518110610f4e57610f4e611faf565b60200260200101819052505050508080610f67906120af565b915050610c70565b509150505b92915050565b610f82611986565b610f8c838361166d565b15611288575f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fce573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ff29190611fc3565b90505f846001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611031573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110559190611fc3565b90506040518060e00160405280836001600160a01b03168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156110ac573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110d39190810190611fde565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611113573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261113a9190810190611fde565b8152602001826001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611189573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526111b09190810190611fde565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156111f0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526112179190810190611fde565b8152602001866001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611258573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061127c9190612064565b81525092505050610f74565b506040805160e0810182525f80825282516020818101855282825280840191909152835180820185528281528385015260608301829052835180820185528281526080840152835190810190935280835260a082019290925260c081019190915292915050565b61131c6040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b5f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611359573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061137d9190611fc3565b90505f8061138c8784876116d0565b6040805160a08101918290526370a0823160e01b9091526001600160a01b038a811660a483015292945090925090819088166370a0823160c48301602060405180830381865afa1580156113e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114069190612064565b81526040516370a0823160e01b81526001600160a01b038a81166004830152602090920191891690634cdad5069082906370a0823190602401602060405180830381865afa15801561145a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061147e9190612064565b6040518263ffffffff1660e01b815260040161149c91815260200190565b602060405180830381865afa1580156114b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114db9190612064565b81526040516370a0823160e01b81526001600160a01b038a811660048301526020909201918616906370a0823190602401602060405180830381865afa158015611527573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061154b9190612064565b8152602081019390935260409092015295945050505050565b604080516060810182525f80825260208201819052918101919091526040516317c547a160e11b81526001600160a01b0384811660048301525f9190841690632f8a8f4290602401606060405180830381865afa1580156115c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115eb9190612201565b90506040518060600160405280825f01516001600160c01b03168152602001826020015163ffffffff168152602001826040015163ffffffff1681525091505092915050565b5f815f0361164057505f610f74565b816127106116526301e1338086612278565b61165c9190612278565b611666919061228f565b9392505050565b5f805b82518110156116c75782818151811061168b5761168b611faf565b60200260200101516001600160a01b0316846001600160a01b0316036116b5576001915050610f74565b806116bf816120af565b915050611670565b505f9392505050565b5f806116dc848461166d565b15611882575f846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561171e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117429190611fc3565b90505f856001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611781573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117a59190611fc3565b6040516370a0823160e01b81526001600160a01b038981166004830152919250908316906370a0823190602401602060405180830381865afa1580156117ed573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118119190612064565b6040516370a0823160e01b81526001600160a01b038981166004830152919550908216906370a0823190602401602060405180830381865afa158015611859573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061187d9190612064565b925050505b935093915050565b604051806101a001604052805f6001600160a01b03168152602001606081526020016060815260200160608152602001606081526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f151581526020016118f2611986565b8152606060208201525f60409091015290565b6040518060c001604052805f6001600160a01b03168152602001606081526020016119536040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b8152604080516060810182525f808252602082810182905292820152910190815260200160608152602001606081525090565b6040518060e001604052805f6001600160a01b0316815260200160608152602001606081526020015f6001600160a01b0316815260200160608152602001606081526020015f81525090565b5f5b838110156119ec5781810151838201526020016119d4565b50505f910152565b5f8151808452611a0b8160208601602086016119d2565b601f01601f19169290920160200192915050565b5f60018060a01b03808351168452602083015160e06020860152611a4660e08601826119f4565b905060408401518582036040870152611a5f82826119f4565b915050816060850151166060860152608084015191508481036080860152611a8781836119f4565b91505060a083015184820360a0860152611aa182826119f4565b91505060c083015160c08501528091505092915050565b5f81518084526020808501808196508360051b810191508286015f5b85811015611b6d578284038952815180516001600160a01b031685528581015161010087870181905290611b0a828801826119f4565b91505060408083015187830382890152611b2483826119f4565b606085810151908a0152608080860151908a015260a080860151908a015260c080860151908a015260e09485015194909801939093525050509784019790840190600101611ad4565b5091979650505050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b83811015611ccd57888303603f19018552815180516001600160a01b031684526101a088820151818a870152611bd7828701826119f4565b9150508782015185820389870152611bef82826119f4565b91505060608083015186830382880152611c0983826119f4565b9250505060808083015186830382880152611c2483826119f4565b60a0858101519089015260c0808601519089015260e08086015190890152610100808601516001600160a01b0316908901526101208086015115159089015261014080860151898303828b015291945092509050611c828382611a1f565b925050506101608083015186830382880152611c9e8382611ab8565b92505050610180808301519250611cb98187018460ff169052565b509588019593505090860190600101611b9f565b509098975050505050505050565b6001600160a01b0381168114611cef575f80fd5b50565b5f60208284031215611d02575f80fd5b813561166681611cdb565b5f8151808452602080850194508084015f5b83811015611d445781516001600160a01b031687529582019590820190600101611d1f565b509495945050505050565b5f8151808452602080850194508084015f5b83811015611d4457815187529582019590820190600101611d61565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b83811015611ccd57888303603f19018552815180516001600160a01b031684528781015161018089860181905290611ddc828701826119f4565b898401518051888c01528b8101516060808a0191909152818c01516080808b01919091528183015160a0808c018290529382015160c08c01528288015180516001600160c01b031660e08d0152602081015163ffffffff9081166101008e0152604090910151166101208c0152818801518b86036101408d01529496509394509091611e688686611d0d565b95508087015196505050505050848103610160860152611e888183611d4f565b968901969450505090860190600101611da2565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ed957611ed9611e9c565b604052919050565b5f67ffffffffffffffff821115611efa57611efa611e9c565b5060051b60200190565b5f82601f830112611f13575f80fd5b81516020611f28611f2383611ee1565b611eb0565b82815260059290921b84018101918181019086841115611f46575f80fd5b8286015b84811015611f6a578051611f5d81611cdb565b8352918301918301611f4a565b509695505050505050565b5f60208284031215611f85575f80fd5b815167ffffffffffffffff811115611f9b575f80fd5b611fa784828501611f04565b949350505050565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611fd3575f80fd5b815161166681611cdb565b5f60208284031215611fee575f80fd5b815167ffffffffffffffff80821115612005575f80fd5b818401915084601f830112612018575f80fd5b81518181111561202a5761202a611e9c565b61203d601f8201601f1916602001611eb0565b9150808252856020828501011115612053575f80fd5b610f6f8160208401602086016119d2565b5f60208284031215612074575f80fd5b5051919050565b5f6020828403121561208b575f80fd5b815160ff81168114611666575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f600182016120c0576120c061209b565b5060010190565b5f80604083850312156120d8575f80fd5b825167ffffffffffffffff808211156120ef575f80fd5b6120fb86838701611f04565b9350602091508185015181811115612111575f80fd5b85019050601f81018613612123575f80fd5b8051612131611f2382611ee1565b81815260059190911b8201830190838101908883111561214f575f80fd5b928401925b8284101561216d57835182529284019290840190612154565b80955050505050509250929050565b5f6080828403121561218c575f80fd5b6040516080810181811067ffffffffffffffff821117156121af576121af611e9c565b60405282516121bd81611cdb565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b805163ffffffff811681146121fc575f80fd5b919050565b5f60608284031215612211575f80fd5b6040516060810181811067ffffffffffffffff8211171561223457612234611e9c565b60405282516001600160c01b038116811461224d575f80fd5b815261225b602084016121e9565b602082015261226c604084016121e9565b60408201529392505050565b8082028115828204841417610f7457610f7461209b565b5f826122a957634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220a35e8bd6967afd2af0187965828baea1f0aa11b910b3ec493615393186ad2df064736f6c63430008140033';

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
