/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakeDataProvider, StakeDataProviderInterface } from './StakeDataProvider';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_umbrella',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
      {
        name: '_rewardsController',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
      {
        name: '_stataTokenFactory',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getStakeData',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'cooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'unstakeWindowSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeTokenUnderlying',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'underlyingIsWaToken',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'waTokenUnderlying',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'waTokenAToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'waTokenPrice',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct Reward[]',
            components: [
              {
                name: 'rewardAddress',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'maxEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'distributionEnd',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'currentEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getUserStakeData',
    inputs: [
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeUserData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'balances',
            type: 'tuple',
            internalType: 'struct StakeUserBalances',
            components: [
              {
                name: 'stakeTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stakeTokenRedeemableAmount',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenATokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'cooldown',
            type: 'tuple',
            internalType: 'struct StakeUserCooldown',
            components: [
              {
                name: 'cooldownAmount',
                type: 'uint192',
                internalType: 'uint192',
              },
              {
                name: 'endOfCooldown',
                type: 'uint32',
                internalType: 'uint32',
              },
              {
                name: 'withdrawalWindow',
                type: 'uint32',
                internalType: 'uint32',
              },
            ],
          },
          {
            name: 'underlyingTokenDecimals',
            type: 'uint8',
            internalType: 'uint8',
          },
          {
            name: 'rewards',
            type: 'address[]',
            internalType: 'address[]',
          },
          {
            name: 'rewardsAccrued',
            type: 'uint256[]',
            internalType: 'uint256[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'rewardsController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'stataTokenFactory',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'umbrella',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x60e060405234801562000010575f80fd5b5060405162001c3c38038062001c3c833981016040819052620000339162000069565b6001600160a01b0392831660805290821660a0521660c052620000ba565b6001600160a01b038116811462000066575f80fd5b50565b5f805f606084860312156200007c575f80fd5b8351620000898162000051565b60208501519093506200009c8162000051565b6040850151909250620000af8162000051565b809150509250925092565b60805160a05160c051611b226200011a5f395f8181605e015281816102500152610aa301525f818160a201528181610383015281816106070152818161069c0152610b9701525f818160c90152818161012501526109c70152611b225ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f531461009d57806384914262146100c4578063a16a09af146100eb578063e9ce34a514610100575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100f3610120565b6040516100949190611444565b61011361010e36600461155e565b6109c2565b60405161009491906115e5565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa15801561017e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101a591908101906117e8565b90505f815167ffffffffffffffff8111156101c2576101c261170f565b60405190808252806020026020018201604052801561024a57816020015b60408051610160810182525f8082526060602083018190529282018190528282018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201526101408101919091528152602001906001900390816101e05790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa1580156102a9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102d091908101906117e8565b90505f5b83518110156109b9575f8482815181106102f0576102f0611822565b602002602001015190505f8190505f826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061035f9190611836565b60405163362a3fad60e01b81526001600160a01b0384811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063362a3fad906024015f60405180830381865afa1580156103c7573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526103ee91908101906117e8565b90505f815167ffffffffffffffff81111561040b5761040b61170f565b60405190808252806020026020018201604052801561047257816020015b61045f6040518060a001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81525090565b8152602001906001900390816104295790505b5090505f6104808489610da5565b90505f805f83156105b257866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104eb9190611836565b9250866001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610529573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054d9190611836565b9150866001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105af9190611851565b90505b5f5b8651811015610776575f8782815181106105d0576105d0611822565b60209081029190910101516040516334fb3ea160e11b81526001600160a01b038c8116600483015280831660248301529192505f917f000000000000000000000000000000000000000000000000000000000000000016906369f67d4290604401608060405180830381865afa15801561064c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106709190611868565b604051630450881160e51b81526001600160a01b038d8116600483015284811660248301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638a11022090604401602060405180830381865afa1580156106e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107059190611851565b90506040518060a00160405280846001600160a01b031681526020018360200151815260200183604001518152602001836060015181526020018281525089858151811061075557610755611822565b6020026020010181905250505050808061076e906118d5565b9150506105b4565b506040518061016001604052808e8c8151811061079557610795611822565b60200260200101516001600160a01b031681526020018a6001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156107e6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261080d91908101906118f9565b81526020018a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108729190611851565b81526020018a6001600160a01b031663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108d79190611851565b81526020018a6001600160a01b03166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610918573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061093c9190611851565b8152602001886001600160a01b031681526020018515158152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001868152508c8b8151811061099257610992611822565b602002602001018190525050505050505050505080806109b1906118d5565b9150506102d4565b50909392505050565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa158015610a20573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a4791908101906117e8565b90505f815167ffffffffffffffff811115610a6457610a6461170f565b604051908082528060200260200182016040528015610a9d57816020015b610a8a611306565b815260200190600190039081610a825790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa158015610afc573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b2391908101906117e8565b90505f5b8351811015610d9b575f848281518110610b4357610b43611822565b602002602001015190505f610b59888386610e0a565b90505f610b66898461107f565b60405160016204621960e51b031981526001600160a01b0385811660048301528b811660248301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063ff73bce0906044015f60405180830381865afa158015610bdd573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610c049190810190611988565b915091506040518060e00160405280866001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610c5d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610c8491908101906118f9565b8152602001858152602001848152602001866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf59190611836565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d30573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d549190611a3d565b60ff16815260200183815260200182815250888781518110610d7857610d78611822565b602002602001018190525050505050508080610d93906118d5565b915050610b27565b5090949350505050565b5f805b8251811015610dff57828181518110610dc357610dc3611822565b60200260200101516001600160a01b0316846001600160a01b031603610ded576001915050610e04565b80610df7816118d5565b915050610da8565b505f90505b92915050565b610e376040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b5f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e74573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e989190611836565b90505f80610ea787848761114c565b6040805160a08101918290526370a0823160e01b9091526001600160a01b038a811660a483015292945090925090819088166370a0823160c48301602060405180830381865afa158015610efd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f219190611851565b81526040516370a0823160e01b81526001600160a01b038a81166004830152602090920191891690634cdad5069082906370a0823190602401602060405180830381865afa158015610f75573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f999190611851565b6040518263ffffffff1660e01b8152600401610fb791815260200190565b602060405180830381865afa158015610fd2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ff69190611851565b81526040516370a0823160e01b81526001600160a01b038a811660048301526020909201918616906370a0823190602401602060405180830381865afa158015611042573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110669190611851565b8152602081019390935260409092015295945050505050565b604080516060810182525f80825260208201819052918101919091526040516317c547a160e11b81526001600160a01b0384811660048301525f9190841690632f8a8f4290602401606060405180830381865afa1580156110e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111069190611a75565b90506040518060600160405280825f01516001600160c01b03168152602001826020015163ffffffff168152602001826040015163ffffffff1681525091505092915050565b5f806111588484610da5565b156112fe575f846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111be9190611836565b90505f856001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111fd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112219190611836565b6040516370a0823160e01b81526001600160a01b038981166004830152919250908316906370a0823190602401602060405180830381865afa158015611269573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061128d9190611851565b6040516370a0823160e01b81526001600160a01b038981166004830152919550908216906370a0823190602401602060405180830381865afa1580156112d5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112f99190611851565b925050505b935093915050565b6040518060e001604052805f6001600160a01b03168152602001606081526020016113546040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b8152604080516060810182525f80825260208281018290529282015291019081525f60208201526060604082018190529081015290565b5f5b838110156113a557818101518382015260200161138d565b50505f910152565b5f81518084526113c481602086016020860161138b565b601f01601f19169290920160200192915050565b5f8151808452602080850194508084015f5b8381101561143957815180516001600160a01b03168852838101518489015260408082015190890152606080820151908901526080908101519088015260a090960195908201906001016113ea565b509495945050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561153957888303603f19018552815180516001600160a01b0316845261016088820151818a8701526114a1828701826113ad565b89840151878b0152606080850151908801526080808501519088015260a0808501516001600160a01b039081169189019190915260c08086015115159089015260e0808601518216908901526101008086015190911690880152610120808501519088015261014093840151878203948801949094529150611525905081836113d8565b968901969450505090860190600101611469565b509098975050505050505050565b6001600160a01b038116811461155b575f80fd5b50565b5f6020828403121561156e575f80fd5b813561157981611547565b9392505050565b5f8151808452602080850194508084015f5b838110156114395781516001600160a01b031687529582019590820190600101611592565b5f8151808452602080850194508084015f5b83811015611439578151875295820195908201906001016115c9565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561153957888303603f19018552815180516001600160a01b03168452878101516101a089860181905290611644828701826113ad565b915050878201516116828987018280518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b50606082015180516001600160c01b031660e0870152602081015163ffffffff90811661010088015260409091015116610120860152608082015160ff1661014086015260a08201518582036101608701526116de8282611580565b91505060c082015191508481036101808601526116fb81836115b7565b96890196945050509086019060010161160a565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561174c5761174c61170f565b604052919050565b5f67ffffffffffffffff82111561176d5761176d61170f565b5060051b60200190565b5f82601f830112611786575f80fd5b8151602061179b61179683611754565b611723565b82815260059290921b840181019181810190868411156117b9575f80fd5b8286015b848110156117dd5780516117d081611547565b83529183019183016117bd565b509695505050505050565b5f602082840312156117f8575f80fd5b815167ffffffffffffffff81111561180e575f80fd5b61181a84828501611777565b949350505050565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611846575f80fd5b815161157981611547565b5f60208284031215611861575f80fd5b5051919050565b5f60808284031215611878575f80fd5b6040516080810181811067ffffffffffffffff8211171561189b5761189b61170f565b60405282516118a981611547565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b5f600182016118f257634e487b7160e01b5f52601160045260245ffd5b5060010190565b5f60208284031215611909575f80fd5b815167ffffffffffffffff80821115611920575f80fd5b818401915084601f830112611933575f80fd5b8151818111156119455761194561170f565b611958601f8201601f1916602001611723565b915080825285602082850101111561196e575f80fd5b61197f81602084016020860161138b565b50949350505050565b5f8060408385031215611999575f80fd5b825167ffffffffffffffff808211156119b0575f80fd5b6119bc86838701611777565b93506020915081850151818111156119d2575f80fd5b85019050601f810186136119e4575f80fd5b80516119f261179682611754565b81815260059190911b82018301908381019088831115611a10575f80fd5b928401925b82841015611a2e57835182529284019290840190611a15565b80955050505050509250929050565b5f60208284031215611a4d575f80fd5b815160ff81168114611579575f80fd5b805163ffffffff81168114611a70575f80fd5b919050565b5f60608284031215611a85575f80fd5b6040516060810181811067ffffffffffffffff82111715611aa857611aa861170f565b60405282516001600160c01b0381168114611ac1575f80fd5b8152611acf60208401611a5d565b6020820152611ae060408401611a5d565b6040820152939250505056fea2646970667358221220cd3097876e2153e01524c3eb0dca4621c8c90dce0d5fc267ae583a27b2809cc864736f6c63430008140033';

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
