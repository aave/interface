/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakeDataProvider, StakeDataProviderInterface } from './StakeDataProvider';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_umbrella',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
      {
        name: '_rewardsController',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
      {
        name: '_stataTokenFactory',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getStakeData',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenSymbol',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'cooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'unstakeWindowSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeTokenUnderlying',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'underlyingIsWaToken',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'waTokenData',
            type: 'tuple',
            internalType: 'struct WaTokenData',
            components: [
              {
                name: 'waTokenUnderlying',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenUnderlyingName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenUnderlyingSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenAToken',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'waTokenATokenName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenATokenSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'waTokenPrice',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct Reward[]',
            components: [
              {
                name: 'rewardAddress',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'rewardName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'rewardSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'maxEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'distributionEnd',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'currentEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'apy',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'underlyingTokenDecimals',
            type: 'uint8',
            internalType: 'uint8',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getUserStakeData',
    inputs: [
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeUserData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'balances',
            type: 'tuple',
            internalType: 'struct StakeUserBalances',
            components: [
              {
                name: 'stakeTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stakeTokenRedeemableAmount',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingWaTokenATokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'cooldown',
            type: 'tuple',
            internalType: 'struct StakeUserCooldown',
            components: [
              {
                name: 'cooldownAmount',
                type: 'uint192',
                internalType: 'uint192',
              },
              {
                name: 'endOfCooldown',
                type: 'uint32',
                internalType: 'uint32',
              },
              {
                name: 'withdrawalWindow',
                type: 'uint32',
                internalType: 'uint32',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'address[]',
            internalType: 'address[]',
          },
          {
            name: 'rewardsAccrued',
            type: 'uint256[]',
            internalType: 'uint256[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'rewardsController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'stataTokenFactory',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'umbrella',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x60e060405234801562000010575f80fd5b506040516200222b3803806200222b833981016040819052620000339162000069565b6001600160a01b0392831660805290821660a0521660c052620000ba565b6001600160a01b038116811462000066575f80fd5b50565b5f805f606084860312156200007c575f80fd5b8351620000898162000051565b60208501519093506200009c8162000051565b6040850151909250620000af8162000051565b809150509250925092565b60805160a05160c0516121116200011a5f395f8181605e01528181610201015261077c01525f818160a201528181610870015281816109db01528181610b370152610bcc01525f818160c90152818161012501526106a001526121115ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f531461009d57806384914262146100c4578063a16a09af146100eb578063e9ce34a514610100575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100f3610120565b60405161009491906119e0565b61011361010e366004611b1f565b61069b565b6040516100949190611baa565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa15801561017e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101a59190810190611da2565b90505f815167ffffffffffffffff8111156101c2576101c2611cc9565b6040519080825280602002602001820160405280156101fb57816020015b6101e86116fe565b8152602001906001900390816101e05790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa15801561025a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102819190810190611da2565b90505f5b8351811015610692575f8482815181106102a1576102a1611ddc565b602002602001015190505f8190505f826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103109190611df0565b90505f61031d84846109b7565b90505f61032a8388610dee565b90506040518061016001604052808a888151811061034a5761034a611ddc565b60200260200101516001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561039b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526103c29190810190611e0b565b8152602001866001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610402573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526104299190810190611e0b565b8152602001866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061048e9190611e91565b8152602001866001600160a01b031663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104f39190611e91565b8152602001866001600160a01b03166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610534573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105589190611e91565b8152602001846001600160a01b031681526020015f6001600160a01b0316835f01516001600160a01b0316141515158152602001828152602001838152602001866001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105f89190611df0565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610633573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106579190611ea8565b60ff1681525088878151811061066f5761066f611ddc565b60200260200101819052505050505050808061068a90611edc565b915050610285565b50909392505050565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa1580156106f9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107209190810190611da2565b90505f815167ffffffffffffffff81111561073d5761073d611cc9565b60405190808252806020026020018201604052801561077657816020015b61076361176b565b81526020019060019003908161075b5790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa1580156107d5573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107fc9190810190611da2565b90505f5b83518110156109ad575f84828151811061081c5761081c611ddc565b602002602001015190505f610832888386611163565b90505f61083f89846113d8565b60405160016204621960e51b031981526001600160a01b0385811660048301528b811660248301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063ff73bce0906044015f60405180830381865afa1580156108b6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526108dd9190810190611ef4565b915091506040518060c00160405280866001600160a01b03168152602001866001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610936573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261095d9190810190611e0b565b81526020018581526020018481526020018381526020018281525088878151811061098a5761098a611ddc565b6020026020010181905250505050505080806109a590611edc565b915050610800565b5090949350505050565b60405163362a3fad60e01b81526001600160a01b0382811660048301526060915f917f0000000000000000000000000000000000000000000000000000000000000000169063362a3fad906024015f60405180830381865afa158015610a1f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a469190810190611da2565b90505f815167ffffffffffffffff811115610a6357610a63611cc9565b604051908082528060200260200182016040528015610adf57816020015b610acc6040518061010001604052805f6001600160a01b0316815260200160608152602001606081526020015f81526020015f81526020015f81526020015f81526020015f81525090565b815260200190600190039081610a815790505b5090505f5b8251811015610de3575f838281518110610b0057610b00611ddc565b60209081029190910101516040516334fb3ea160e11b81526001600160a01b03888116600483015280831660248301529192505f917f000000000000000000000000000000000000000000000000000000000000000016906369f67d4290604401608060405180830381865afa158015610b7c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba09190611fa9565b604051630450881160e51b81526001600160a01b03898116600483015284811660248301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638a11022090604401602060405180830381865afa158015610c11573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c359190611e91565b9050604051806101000160405280846001600160a01b03168152602001846001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610c8d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610cb49190810190611e0b565b8152602001846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610cf4573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d1b9190810190611e0b565b8152602001836020015181526020018360400151815260200183606001518152602001828152602001610dad838c6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d84573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610da89190611e91565b6114a5565b815250858581518110610dc257610dc2611ddc565b60200260200101819052505050508080610ddb90611edc565b915050610ae4565b509150505b92915050565b610df66117ec565b610e0083836114e1565b156110fc575f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e42573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e669190611df0565b90505f846001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ec99190611df0565b90506040518060e00160405280836001600160a01b03168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610f20573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f479190810190611e0b565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610f87573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610fae9190810190611e0b565b8152602001826001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610ffd573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110249190810190611e0b565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611064573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261108b9190810190611e0b565b8152602001866001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110cc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110f09190611e91565b81525092505050610de8565b506040805160e0810182525f80825282516020818101855282825280840191909152835180820185528281528385015260608301829052835180820185528281526080840152835190810190935280835260a082019290925260c081019190915292915050565b6111906040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b5f836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f19190611df0565b90505f80611200878487611544565b6040805160a08101918290526370a0823160e01b9091526001600160a01b038a811660a483015292945090925090819088166370a0823160c48301602060405180830381865afa158015611256573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061127a9190611e91565b81526040516370a0823160e01b81526001600160a01b038a81166004830152602090920191891690634cdad5069082906370a0823190602401602060405180830381865afa1580156112ce573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112f29190611e91565b6040518263ffffffff1660e01b815260040161131091815260200190565b602060405180830381865afa15801561132b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061134f9190611e91565b81526040516370a0823160e01b81526001600160a01b038a811660048301526020909201918616906370a0823190602401602060405180830381865afa15801561139b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113bf9190611e91565b8152602081019390935260409092015295945050505050565b604080516060810182525f80825260208201819052918101919091526040516317c547a160e11b81526001600160a01b0384811660048301525f9190841690632f8a8f4290602401606060405180830381865afa15801561143b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061145f919061202e565b90506040518060600160405280825f01516001600160c01b03168152602001826020015163ffffffff168152602001826040015163ffffffff1681525091505092915050565b5f815f036114b457505f610de8565b816127106114c66301e13380866120a5565b6114d091906120a5565b6114da91906120bc565b9392505050565b5f805b825181101561153b578281815181106114ff576114ff611ddc565b60200260200101516001600160a01b0316846001600160a01b031603611529576001915050610de8565b8061153381611edc565b9150506114e4565b505f9392505050565b5f8061155084846114e1565b156116f6575f846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611592573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115b69190611df0565b90505f856001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116199190611df0565b6040516370a0823160e01b81526001600160a01b038981166004830152919250908316906370a0823190602401602060405180830381865afa158015611661573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116859190611e91565b6040516370a0823160e01b81526001600160a01b038981166004830152919550908216906370a0823190602401602060405180830381865afa1580156116cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116f19190611e91565b925050505b935093915050565b6040518061016001604052805f6001600160a01b0316815260200160608152602001606081526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f151581526020016117586117ec565b8152606060208201525f60409091015290565b6040518060c001604052805f6001600160a01b03168152602001606081526020016117b96040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b8152604080516060810182525f808252602082810182905292820152910190815260200160608152602001606081525090565b6040518060e001604052805f6001600160a01b0316815260200160608152602001606081526020015f6001600160a01b0316815260200160608152602001606081526020015f81525090565b5f5b8381101561185257818101518382015260200161183a565b50505f910152565b5f8151808452611871816020860160208601611838565b601f01601f19169290920160200192915050565b5f60018060a01b03808351168452602083015160e060208601526118ac60e086018261185a565b9050604084015185820360408701526118c5828261185a565b9150508160608501511660608601526080840151915084810360808601526118ed818361185a565b91505060a083015184820360a0860152611907828261185a565b91505060c083015160c08501528091505092915050565b5f81518084526020808501808196508360051b810191508286015f5b858110156119d3578284038952815180516001600160a01b0316855285810151610100878701819052906119708288018261185a565b9150506040808301518783038289015261198a838261185a565b606085810151908a0152608080860151908a015260a080860151908a015260c080860151908a015260e0948501519490980193909352505050978401979084019060010161193a565b5091979650505050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b83811015611afa57888303603f19018552815180516001600160a01b0316845261016088820151818a870152611a3d8287018261185a565b9150508782015185820389870152611a55828261185a565b606084810151908801526080808501519088015260a0808501519088015260c0808501516001600160a01b03169088015260e08085015115159088015261010080850151888303828a01529193509150611aaf8382611885565b925050506101208083015186830382880152611acb838261191e565b92505050610140808301519250611ae68187018460ff169052565b509588019593505090860190600101611a05565b509098975050505050505050565b6001600160a01b0381168114611b1c575f80fd5b50565b5f60208284031215611b2f575f80fd5b81356114da81611b08565b5f8151808452602080850194508084015f5b83811015611b715781516001600160a01b031687529582019590820190600101611b4c565b509495945050505050565b5f8151808452602080850194508084015f5b83811015611b7157815187529582019590820190600101611b8e565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b83811015611afa57888303603f19018552815180516001600160a01b031684528781015161018089860181905290611c098287018261185a565b898401518051888c01528b8101516060808a0191909152818c01516080808b01919091528183015160a0808c018290529382015160c08c01528288015180516001600160c01b031660e08d0152602081015163ffffffff9081166101008e0152604090910151166101208c0152818801518b86036101408d01529496509394509091611c958686611b3a565b95508087015196505050505050848103610160860152611cb58183611b7c565b968901969450505090860190600101611bcf565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d0657611d06611cc9565b604052919050565b5f67ffffffffffffffff821115611d2757611d27611cc9565b5060051b60200190565b5f82601f830112611d40575f80fd5b81516020611d55611d5083611d0e565b611cdd565b82815260059290921b84018101918181019086841115611d73575f80fd5b8286015b84811015611d97578051611d8a81611b08565b8352918301918301611d77565b509695505050505050565b5f60208284031215611db2575f80fd5b815167ffffffffffffffff811115611dc8575f80fd5b611dd484828501611d31565b949350505050565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611e00575f80fd5b81516114da81611b08565b5f60208284031215611e1b575f80fd5b815167ffffffffffffffff80821115611e32575f80fd5b818401915084601f830112611e45575f80fd5b815181811115611e5757611e57611cc9565b611e6a601f8201601f1916602001611cdd565b9150808252856020828501011115611e80575f80fd5b610de3816020840160208601611838565b5f60208284031215611ea1575f80fd5b5051919050565b5f60208284031215611eb8575f80fd5b815160ff811681146114da575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f60018201611eed57611eed611ec8565b5060010190565b5f8060408385031215611f05575f80fd5b825167ffffffffffffffff80821115611f1c575f80fd5b611f2886838701611d31565b9350602091508185015181811115611f3e575f80fd5b85019050601f81018613611f50575f80fd5b8051611f5e611d5082611d0e565b81815260059190911b82018301908381019088831115611f7c575f80fd5b928401925b82841015611f9a57835182529284019290840190611f81565b80955050505050509250929050565b5f60808284031215611fb9575f80fd5b6040516080810181811067ffffffffffffffff82111715611fdc57611fdc611cc9565b6040528251611fea81611b08565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b805163ffffffff81168114612029575f80fd5b919050565b5f6060828403121561203e575f80fd5b6040516060810181811067ffffffffffffffff8211171561206157612061611cc9565b60405282516001600160c01b038116811461207a575f80fd5b815261208860208401612016565b602082015261209960408401612016565b60408201529392505050565b8082028115828204841417610de857610de8611ec8565b5f826120d657634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220acea8a3bd8da1bfe953b71e5e951f700d5f4bc81880b339d0bccdcde954df24a64736f6c63430008140033';

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
