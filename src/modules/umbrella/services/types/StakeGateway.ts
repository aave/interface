/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface StakeGatewayInterface extends utils.Interface {
  functions: {
    'redeem(address,uint256)': FunctionFragment;
    'redeemATokens(address,uint256)': FunctionFragment;
    'stake(address,uint256)': FunctionFragment;
    'stakeATokens(address,uint256)': FunctionFragment;
    'stakeATokensWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'stakeWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'stataTokenFactory()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'redeem'
      | 'redeemATokens'
      | 'stake'
      | 'stakeATokens'
      | 'stakeATokensWithPermit'
      | 'stakeWithPermit'
      | 'stataTokenFactory'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'redeem', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'redeemATokens', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stake', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakeATokens', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'stakeATokensWithPermit',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeWithPermit',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'stataTokenFactory', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemATokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeATokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeATokensWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stataTokenFactory', data: BytesLike): Result;

  events: {};
}

export interface StakeGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    redeem(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeATokensWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stataTokenFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  redeem(
    stakeToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemATokens(
    stakeToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    stakeToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeATokens(
    stakeToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeATokensWithPermit(
    stakeToken: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeWithPermit(
    stakeToken: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stataTokenFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    redeem(stakeToken: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    redeemATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(stakeToken: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakeATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeATokensWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stataTokenFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    redeem(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeATokensWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stataTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    redeem(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeATokens(
      stakeToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeATokensWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeWithPermit(
      stakeToken: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stataTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
