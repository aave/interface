/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRewardsStructs {
  export type SignatureParamsStruct = {
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureParamsStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface IRewardsDistributorInterface extends utils.Interface {
  functions: {
    "claimAllRewards(address,address)": FunctionFragment;
    "claimAllRewardsOnBehalf(address,address,address)": FunctionFragment;
    "claimAllRewardsPermit(address,address,address,uint256,(uint8,bytes32,bytes32))": FunctionFragment;
    "claimSelectedRewards(address,address[],address)": FunctionFragment;
    "claimSelectedRewardsOnBehalf(address,address[],address,address)": FunctionFragment;
    "claimSelectedRewardsPermit(address,address[],address,address,uint256,(uint8,bytes32,bytes32))": FunctionFragment;
    "setClaimer(address,bool)": FunctionFragment;
    "setClaimer(address,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimAllRewards"
      | "claimAllRewardsOnBehalf"
      | "claimAllRewardsPermit"
      | "claimSelectedRewards"
      | "claimSelectedRewardsOnBehalf"
      | "claimSelectedRewardsPermit"
      | "setClaimer(address,bool)"
      | "setClaimer(address,address,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimAllRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewardsOnBehalf",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewardsPermit",
    values: [
      string,
      string,
      string,
      BigNumberish,
      IRewardsStructs.SignatureParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSelectedRewards",
    values: [string, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSelectedRewardsOnBehalf",
    values: [string, string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSelectedRewardsPermit",
    values: [
      string,
      string[],
      string,
      string,
      BigNumberish,
      IRewardsStructs.SignatureParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimer(address,bool)",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimer(address,address,bool)",
    values: [string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewardsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewardsPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSelectedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSelectedRewardsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSelectedRewardsPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimer(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimer(address,address,bool)",
    data: BytesLike
  ): Result;

  events: {
    "ClaimerSet(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimerSet"): EventFragment;
}

export interface ClaimerSetEventObject {
  user: string;
  claimer: string;
  flag: boolean;
}
export type ClaimerSetEvent = TypedEvent<
  [string, string, boolean],
  ClaimerSetEventObject
>;

export type ClaimerSetEventFilter = TypedEventFilter<ClaimerSetEvent>;

export interface IRewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardsDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimAllRewards(
      asset: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimAllRewardsOnBehalf(
      asset: string,
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimAllRewardsPermit(
      asset: string,
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimSelectedRewards(
      asset: string,
      rewards: string[],
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimSelectedRewardsOnBehalf(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimSelectedRewardsPermit(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setClaimer(address,bool)"(
      claimer: string,
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setClaimer(address,address,bool)"(
      user: string,
      claimer: string,
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claimAllRewards(
    asset: string,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimAllRewardsOnBehalf(
    asset: string,
    user: string,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimAllRewardsPermit(
    asset: string,
    user: string,
    receiver: string,
    deadline: BigNumberish,
    sig: IRewardsStructs.SignatureParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimSelectedRewards(
    asset: string,
    rewards: string[],
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimSelectedRewardsOnBehalf(
    asset: string,
    rewards: string[],
    user: string,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimSelectedRewardsPermit(
    asset: string,
    rewards: string[],
    user: string,
    receiver: string,
    deadline: BigNumberish,
    sig: IRewardsStructs.SignatureParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setClaimer(address,bool)"(
    claimer: string,
    flag: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setClaimer(address,address,bool)"(
    user: string,
    claimer: string,
    flag: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimAllRewards(
      asset: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { rewards: string[]; amounts: BigNumber[] }
    >;

    claimAllRewardsOnBehalf(
      asset: string,
      user: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { rewards: string[]; amounts: BigNumber[] }
    >;

    claimAllRewardsPermit(
      asset: string,
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { rewards: string[]; amounts: BigNumber[] }
    >;

    claimSelectedRewards(
      asset: string,
      rewards: string[],
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    claimSelectedRewardsOnBehalf(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    claimSelectedRewardsPermit(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "setClaimer(address,bool)"(
      claimer: string,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimer(address,address,bool)"(
      user: string,
      claimer: string,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimerSet(address,address,bool)"(
      user?: string | null,
      claimer?: string | null,
      flag?: null
    ): ClaimerSetEventFilter;
    ClaimerSet(
      user?: string | null,
      claimer?: string | null,
      flag?: null
    ): ClaimerSetEventFilter;
  };

  estimateGas: {
    claimAllRewards(
      asset: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimAllRewardsOnBehalf(
      asset: string,
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimAllRewardsPermit(
      asset: string,
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimSelectedRewards(
      asset: string,
      rewards: string[],
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimSelectedRewardsOnBehalf(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimSelectedRewardsPermit(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setClaimer(address,bool)"(
      claimer: string,
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setClaimer(address,address,bool)"(
      user: string,
      claimer: string,
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimAllRewards(
      asset: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimAllRewardsOnBehalf(
      asset: string,
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimAllRewardsPermit(
      asset: string,
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimSelectedRewards(
      asset: string,
      rewards: string[],
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimSelectedRewardsOnBehalf(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimSelectedRewardsPermit(
      asset: string,
      rewards: string[],
      user: string,
      receiver: string,
      deadline: BigNumberish,
      sig: IRewardsStructs.SignatureParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setClaimer(address,bool)"(
      claimer: string,
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setClaimer(address,address,bool)"(
      user: string,
      claimer: string,
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
