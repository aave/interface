/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type WaTokenDataStruct = {
  waTokenUnderlying: string;
  waTokenUnderlyingName: string;
  waTokenUnderlyingSymbol: string;
  waTokenAToken: string;
  waTokenATokenName: string;
  waTokenATokenSymbol: string;
  waTokenPrice: BigNumberish;
};

export type WaTokenDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber
] & {
  waTokenUnderlying: string;
  waTokenUnderlyingName: string;
  waTokenUnderlyingSymbol: string;
  waTokenAToken: string;
  waTokenATokenName: string;
  waTokenATokenSymbol: string;
  waTokenPrice: BigNumber;
};

export type RewardStruct = {
  rewardAddress: string;
  rewardName: string;
  rewardSymbol: string;
  index: BigNumberish;
  maxEmissionPerSecond: BigNumberish;
  distributionEnd: BigNumberish;
  currentEmissionPerSecond: BigNumberish;
  apy: BigNumberish;
};

export type RewardStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  rewardAddress: string;
  rewardName: string;
  rewardSymbol: string;
  index: BigNumber;
  maxEmissionPerSecond: BigNumber;
  distributionEnd: BigNumber;
  currentEmissionPerSecond: BigNumber;
  apy: BigNumber;
};

export type StakeDataStruct = {
  stakeToken: string;
  stakeTokenName: string;
  stakeTokenSymbol: string;
  stakeTokenTotalSupply: BigNumberish;
  cooldownSeconds: BigNumberish;
  unstakeWindowSeconds: BigNumberish;
  stakeTokenUnderlying: string;
  underlyingIsWaToken: boolean;
  waTokenData: WaTokenDataStruct;
  rewards: RewardStruct[];
  underlyingTokenDecimals: BigNumberish;
};

export type StakeDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  boolean,
  WaTokenDataStructOutput,
  RewardStructOutput[],
  number
] & {
  stakeToken: string;
  stakeTokenName: string;
  stakeTokenSymbol: string;
  stakeTokenTotalSupply: BigNumber;
  cooldownSeconds: BigNumber;
  unstakeWindowSeconds: BigNumber;
  stakeTokenUnderlying: string;
  underlyingIsWaToken: boolean;
  waTokenData: WaTokenDataStructOutput;
  rewards: RewardStructOutput[];
  underlyingTokenDecimals: number;
};

export type StakeUserBalancesStruct = {
  stakeTokenBalance: BigNumberish;
  stakeTokenRedeemableAmount: BigNumberish;
  underlyingTokenBalance: BigNumberish;
  underlyingWaTokenBalance: BigNumberish;
  underlyingWaTokenATokenBalance: BigNumberish;
};

export type StakeUserBalancesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  stakeTokenBalance: BigNumber;
  stakeTokenRedeemableAmount: BigNumber;
  underlyingTokenBalance: BigNumber;
  underlyingWaTokenBalance: BigNumber;
  underlyingWaTokenATokenBalance: BigNumber;
};

export type StakeUserCooldownStruct = {
  cooldownAmount: BigNumberish;
  endOfCooldown: BigNumberish;
  withdrawalWindow: BigNumberish;
};

export type StakeUserCooldownStructOutput = [BigNumber, number, number] & {
  cooldownAmount: BigNumber;
  endOfCooldown: number;
  withdrawalWindow: number;
};

export type StakeUserDataStruct = {
  stakeToken: string;
  stakeTokenName: string;
  balances: StakeUserBalancesStruct;
  cooldown: StakeUserCooldownStruct;
  rewards: string[];
  rewardsAccrued: BigNumberish[];
};

export type StakeUserDataStructOutput = [
  string,
  string,
  StakeUserBalancesStructOutput,
  StakeUserCooldownStructOutput,
  string[],
  BigNumber[]
] & {
  stakeToken: string;
  stakeTokenName: string;
  balances: StakeUserBalancesStructOutput;
  cooldown: StakeUserCooldownStructOutput;
  rewards: string[];
  rewardsAccrued: BigNumber[];
};

export interface StakeDataProviderInterface extends utils.Interface {
  functions: {
    'getStakeData()': FunctionFragment;
    'getUserStakeData(address)': FunctionFragment;
    'rewardsController()': FunctionFragment;
    'stataTokenFactory()': FunctionFragment;
    'umbrella()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getStakeData'
      | 'getUserStakeData'
      | 'rewardsController'
      | 'stataTokenFactory'
      | 'umbrella'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getStakeData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserStakeData', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardsController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stataTokenFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'umbrella', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getStakeData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserStakeData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stataTokenFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'umbrella', data: BytesLike): Result;

  events: {};
}

export interface StakeDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getStakeData(overrides?: CallOverrides): Promise<[StakeDataStructOutput[]]>;

    getUserStakeData(
      user: string,
      overrides?: CallOverrides
    ): Promise<[StakeUserDataStructOutput[]]>;

    rewardsController(overrides?: CallOverrides): Promise<[string]>;

    stataTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    umbrella(overrides?: CallOverrides): Promise<[string]>;
  };

  getStakeData(overrides?: CallOverrides): Promise<StakeDataStructOutput[]>;

  getUserStakeData(user: string, overrides?: CallOverrides): Promise<StakeUserDataStructOutput[]>;

  rewardsController(overrides?: CallOverrides): Promise<string>;

  stataTokenFactory(overrides?: CallOverrides): Promise<string>;

  umbrella(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getStakeData(overrides?: CallOverrides): Promise<StakeDataStructOutput[]>;

    getUserStakeData(user: string, overrides?: CallOverrides): Promise<StakeUserDataStructOutput[]>;

    rewardsController(overrides?: CallOverrides): Promise<string>;

    stataTokenFactory(overrides?: CallOverrides): Promise<string>;

    umbrella(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getStakeData(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakeData(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsController(overrides?: CallOverrides): Promise<BigNumber>;

    stataTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    umbrella(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getStakeData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStakeData(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stataTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    umbrella(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
